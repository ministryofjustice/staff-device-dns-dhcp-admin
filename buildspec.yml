version: 0.2

env:
  variables:
    DB_PORT: 3306
    RACK_ENV: "production"
    ENV: ${ENV}
    BUNDLE_WITHOUT: "test development"
  parameter-store:
    DB_USER: "/codebuild/dhcp/$ENV/admin/db/username"
    DB_PASS: "/codebuild/dhcp/$ENV/admin/db/password"
    DB_HOST: "/codebuild/dhcp/$ENV/admin/db/hostname"
    DB_NAME: "/codebuild/dhcp/$ENV/admin/db/name"
    REGISTRY_URL: "/codebuild/dhcp/$ENV/ecr/endpoint"
    TARGET_AWS_ACCOUNT_ID: "/codebuild/$ENV/account_id"
    SECRET_KEY_BASE: "/codebuild/dhcp/admin/rails_master_key"
    ROLE_ARN: "/codebuild/pttp-ci-infrastructure-core-pipeline/${ENV}/assume_role"
    DHCP_DNS_TERRAFORM_OUTPUTS: "/terraform_dns_dhcp/$ENV/outputs"
    DOCKER_USERNAME: "/moj-network-access-control/docker/username"
    DOCKER_PASSWORD: "/moj-network-access-control/docker/password"

phases:
  install:
    commands:
      - echo none

  build:
    commands:
      - make authenticate-docker
      - |
        if [ "$ENV" = "development" ]; then
          if aws ecr describe-images --repository-name staff-device-dhcp-admin --image-ids imageTag=${tag_version} > /dev/null 2>&1; then
            echo "Image with tag ${tag_version} already exists. Skipping push.";
          else
            echo "I need to build a new image";
          fi
        elif [ "$ENV" = "pre-production" ]; then
          make promote
          make migrate;
          make bootstrap;
          make deploy;
        elif [ "$ENV" = "production" ]; then
          make promote;
          make migrate;
          make bootstrap;
          make deploy;
        else
          echo "No ENV var given!" && exit 1;
        fi
